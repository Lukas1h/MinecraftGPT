{"version":3,"sources":["TimedQueue.ts"],"names":[],"mappings":"AAAA,MAAM,IAAI;IAQR,YAAY,WAAmB,EAAE,MAA0C;QACzE,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC;QAC7B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;QAEnB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC/B,CAAC;IAKD,eAAe,CAAC,OAAkD,EAAE,MAA8B;QAChG,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;IAC1B,CAAC;;AAfc,gBAAW,GAAG,CAAC,CAAC;AAkBjC;;GAEG;AACH,MAAM,OAAO,UAAU;IAAvB;QACU,UAAK,GAAW,EAAE,CAAC;IAwF7B,CAAC;IAtFC;;;;;OAKG;IACH,UAAU,CAAC,EAAc,EAAE,QAAiB;QAC1C,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG,EAAE,CAAC;SACf;QAED,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAEnD,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAElE,0FAA0F;QAE1F,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEtB,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,QAAgB;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACH,YAAY,CAAC,QAAuB;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC;IACtE,CAAC;IAED;;;;;OAKG;IACH,WAAW,CAAC,EAAa,EAAE,SAAiB;QAC1C,OAAO,CAAC,IAAI,CAAC,wBAAwB,SAAS,EAAE,CAAC,CAAC;QAElD,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAEpD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC;QAE5C,0FAA0F;QAC1F,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEtB,OAAO,IAAI,CAAC,EAAE,CAAC;IACjB,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,EAAU;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW;QACf,uBAAuB;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,SAAS,EAAE,CAAC;YAEjB,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,EAAE;gBACvB,IAAI,IAAI,CAAC,IAAI;oBAAE,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBAEjC,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;iBACtB;gBAED,IAAI,IAAI,CAAC,SAAS,EAAE;oBAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;iBACjC;qBAAM;oBACL,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxB,CAAC,EAAE,CAAC;iBACL;aACF;SACF;IACH,CAAC;CACF","file":"../cotta/scripts/TimedQueue.js","sourcesContent":["class Task {\n  ticksLeft: number;\n  func?: (...args: any[]) => Promise<void>;\n  id: number;\n  promise: Promise<Task> | undefined;\n  frequency?: number; // Used for setInterval\n  private static taskIdCount = 0;\n\n  constructor(ticksLeftIn: number, funcIn?: (...args: any[]) => Promise<void>) {\n    this.ticksLeft = ticksLeftIn;\n    this.func = funcIn;\n\n    this.id = Task.taskIdCount++;\n  }\n\n  _resolver: ((value: Task | PromiseLike<Task>) => void) | undefined;\n  _rejector: ((reason?: any) => void) | undefined;\n\n  _promiseHandler(resolve: (value: Task | PromiseLike<Task>) => void, reject: (reason?: any) => void) {\n    this._resolver = resolve;\n    this._rejector = reject;\n  }\n}\n\n/**\n * A stack to maintain functions scheduled by setInterval and setTimeout\n */\nexport class TimedQueue {\n  private tasks: Task[] = [];\n\n  /**\n   * setTimeout implementation using ticks to delay a function call\n   * @param fn a function to be run after a delay\n   * @param delay The duration of time to wait before running the function (note that a tick is 50 milliseconds)\n   * @returns a number between 1 and 10000 that can be used to cancel the task\n   */\n  setTimeout(fn?: () => any, duration?: number): Promise<Task> {\n    if (!duration) {\n      duration = 50;\n    }\n\n    let task = new Task(Math.floor(duration / 50), fn);\n\n    task.promise = new Promise<Task>(task._promiseHandler.bind(task));\n\n    // console.warn(`pushing task ${task.id} on the stack with ${task.ticksLeft} ticks left`);\n\n    this.tasks.push(task);\n\n    return task.promise;\n  }\n\n  sleep(duration: number): Promise<Task> {\n    return this.setTimeout(undefined, duration);\n  }\n\n  /**\n   * Clears the timed out function from the stack\n   * @param taskProm the id of the task to cancel\n   */\n  clearTimeout(taskProm: Promise<Task>) {\n    this.tasks = this.tasks.filter((task) => task.promise !== taskProm);\n  }\n\n  /**\n   * setInterval implementation using ticks to run a function on a regular interval\n   * @param fn a function to be run on a certain frequency\n   * @param frequency The frequency in which to run the function in milliseconds (note that a tick is 50 milliseconds)\n   * @returns\n   */\n  setInterval(fn: () => any, frequency: number) {\n    console.warn(`setting interval for ${frequency}`);\n\n    let task = new Task(Math.floor(frequency / 50), fn);\n\n    task.frequency = Math.floor(frequency / 50);\n\n    // console.warn(`pushing task ${task.id} on the stack with ${task.ticksLeft} ticks left`);\n    this.tasks.push(task);\n\n    return task.id;\n  }\n\n  /**\n   * Clears the interval function from the stack\n   * @param id the id of the task to cancel\n   */\n  clearInterval(id: number) {\n    this.tasks = this.tasks.filter((task) => task.id !== id);\n  }\n\n  /**\n   * Runs once every tick. Used to update the task stack (to support setInterval and setTimeout)\n   */\n  async processTick() {\n    //update the task stack\n    for (let i = 0; i < this.tasks.length; i++) {\n      let task = this.tasks[i];\n      task.ticksLeft--;\n\n      if (task.ticksLeft <= 0) {\n        if (task.func) await task.func();\n\n        if (task._resolver) {\n          task._resolver(task);\n        }\n\n        if (task.frequency) {\n          task.ticksLeft = task.frequency;\n        } else {\n          this.tasks.splice(i, 1);\n          i--;\n        }\n      }\n    }\n  }\n}\n"],"sourceRoot":"../scripts"}